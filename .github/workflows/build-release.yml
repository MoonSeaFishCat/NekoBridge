name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        os: [linux, windows]
        arch: [amd64]
        include:
          - os: linux
            goos: linux
            goarch: amd64
            ext: ""
            archive_ext: "tar.gz"
            cc: "gcc"
          - os: windows
            goos: windows
            goarch: amd64
            ext: ".exe"
            archive_ext: "zip"
            cc: "x86_64-w64-mingw32-gcc"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install frontend dependencies
        working-directory: ./web/frontend
        run: pnpm install

      - name: Build frontend
        working-directory: ./web/frontend
        run: pnpm build

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib gcc-mingw-w64

      - name: Get Go dependencies
        run: go mod download

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
          CC: ${{ matrix.cc }}
        run: |
          go build -ldflags="-w -s" -o nekobridge${{ matrix.ext }} .

      - name: Create release directory
        run: |
          mkdir -p release/nekobridge-${{ matrix.os }}-${{ matrix.arch }}
          cp nekobridge${{ matrix.ext }} release/nekobridge-${{ matrix.os }}-${{ matrix.arch }}/
          mkdir -p release/nekobridge-${{ matrix.os }}-${{ matrix.arch }}/configs
          cp configs/config.yaml release/nekobridge-${{ matrix.os }}-${{ matrix.arch }}/configs/ || echo "config.yaml not found, will be auto-created"
          cp README.md release/nekobridge-${{ matrix.os }}-${{ matrix.arch }}/
          
      - name: Create startup script (Linux)
        if: matrix.os == 'linux'
        run: |
          cat > release/nekobridge-${{ matrix.os }}-${{ matrix.arch }}/start.sh << 'EOF'
          #!/bin/bash
          echo "🐱 启动 NekoBridge..."
          ./nekobridge
          EOF
          chmod +x release/nekobridge-${{ matrix.os }}-${{ matrix.arch }}/start.sh

      - name: Create startup script (Windows)
        if: matrix.os == 'windows'
        run: |
          cat > release/nekobridge-${{ matrix.os }}-${{ matrix.arch }}/start.bat << 'EOF'
          @echo off
          echo 🐱 启动 NekoBridge...
          nekobridge.exe
          pause
          EOF

      - name: Create archive (Linux)
        if: matrix.os == 'linux'
        run: |
          cd release
          tar -czf nekobridge-${{ matrix.os }}-${{ matrix.arch }}.tar.gz nekobridge-${{ matrix.os }}-${{ matrix.arch }}

      - name: Create archive (Windows)
        if: matrix.os == 'windows'
        run: |
          cd release
          zip -r nekobridge-${{ matrix.os }}-${{ matrix.arch }}.zip nekobridge-${{ matrix.os }}-${{ matrix.arch }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nekobridge-${{ matrix.os }}-${{ matrix.arch }}
          path: release/nekobridge-${{ matrix.os }}-${{ matrix.arch }}.${{ matrix.archive_ext }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Set release tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "RELEASE_TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          else
            echo "RELEASE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi

      - name: Generate changelog
        run: |
          cat > RELEASE_NOTES.md << 'EOF'
          ## 🚀 NekoBridge Release ${{ env.RELEASE_TAG }}

          ### 📦 下载包说明
          - `nekobridge-linux-amd64.tar.gz` - Linux x64 版本
          - `nekobridge-windows-amd64.zip` - Windows x64 版本

          ### 🛠️ 安装说明
          
          #### Linux
          ```bash
          tar -xzf nekobridge-linux-amd64.tar.gz
          cd nekobridge-linux-amd64
          chmod +x nekobridge
          ./start.sh
          ```
          
          #### Windows
          1. 解压 `nekobridge-windows-amd64.zip`
          2. 双击运行 `start.bat` 或直接运行 `nekobridge.exe`

          ### 🌐 访问地址
          - Web管理界面: http://localhost:3000
          - 默认账号: admin / admin123
          - API文档: http://localhost:3000/api

          ### 📋 主要功能
          - ✅ Webhook 到 WebSocket 桥接
          - ✅ 现代化 Web 管理界面
          - ✅ 完整的密钥管理系统
          - ✅ 实时连接监控
          - ✅ Ed25519 签名验证
          - ✅ 日志管理系统

          ### 🔧 配置文件
          配置文件位于 `configs/config.yaml`，首次运行会自动创建默认配置。

          ---
          **完整文档**: [README.md](https://github.com/your-username/nekobridge/blob/main/README.md)
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: NekoBridge ${{ env.RELEASE_TAG }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
          files: |
            artifacts/nekobridge-linux-amd64/nekobridge-linux-amd64.tar.gz
            artifacts/nekobridge-windows-amd64/nekobridge-windows-amd64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -f latest
          git push origin latest --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
